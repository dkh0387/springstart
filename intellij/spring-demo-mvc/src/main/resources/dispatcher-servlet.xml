<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- Line 7: XML namespace for AspectJ proxy
         Line 16/17: point to the according schema locations-->

    <!-- Add AspectJ autoproxy support for AOP.
     Using this Spring can actually process all @Aspect classes with advices-->
    <aop:aspectj-autoproxy/>

    <!-- Step 3: Add support for component scanning -->
    <context:component-scan base-package="de.dkh.springdemo.mvc"/>

    <!-- Custom messages to use
        NOTE: it is very important to use exactly this id and class in order to load the file {@code messages.properties} properly!
        Basically we load a normal bean {@code ResourceBundleMessageSource} with id and bind the resource on it -->
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames" value="messages"/>
    </bean>

    <!-- Step 4: Add support for conversion, formatting and validation support -->
    <mvc:annotation-driven/>

    <!-- Step 5: Define Spring MVC view resolver -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/classes/templates/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>