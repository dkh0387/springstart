<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- Line 7: XML namespace for AspectJ proxy
         Line 16/17: point to the according schema locations-->

    <!-- Add AspectJ autoproxy support for AOP.
     Using this Spring can actually process all @Aspect classes with advices-->
    <aop:aspectj-autoproxy/>

    <!-- Step 3: Add support for component scanning -->
    <context:component-scan base-package="de.dkh.webcostumertracker"/>

    <!-- Custom messages to use
        NOTE: it is very important to use exactly this id and class in order to load the file {@code messages.properties} properly!
        Basically we load a normal bean {@code ResourceBundleMessageSource} with id and bind the resource on it -->
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames" value="messages"/>
    </bean>

    <!-- Step 4: Add support for conversion, formatting and validation support -->
    <mvc:annotation-driven/>

    <!-- Step 5: Define Spring MVC view resolver -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/classes/templates/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- Step 1: Define Database DataSource / connection pool
                 We could define multiple data sources here.
                 For each we need a session factory, a transaction manager and a tx:annotation driven.
                 NOTE: the ids here correspond with the autowired fields in code (see CustomerDAOImpl)
     -->
    <bean id="dataSourceCustomer" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbcUrl"
                  value="jdbc:mysql://localhost:3307/web_customer_tracker?useSSL=false&amp;serverTimezone=UTC"/>
        <property name="user" value="springstudent"/>
        <property name="password" value="springstudent"/>

        <!-- these are connection pool properties for C3P0 -->
        <property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <property name="maxIdleTime" value="30000"/>
    </bean>

    <!-- Step 2: Setup Hibernate session factory for db connection -->
    <bean id="sessionFactoryCustomer"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSourceCustomer"/>
        <!-- packages to scan: it is a recursive scan, starting at `de.dkh.webcostumertracker`;
         we can also define a list of packages-->
        <property name="packagesToScan" value="de.dkh.webcostumertracker.entity"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>

    <!-- Step 3: Setup Hibernate transaction manager -->
    <bean id="transactionManagerCustomer"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactoryCustomer"/>
    </bean>

    <!-- Step 4: Enable configuration of transactional behavior based on annotations.
     It allows us to use `@Transactional` annotation in order to minimize coding to start and stop transactions.
        Spring own `HibernateTransactionManager` handle this for us-->
    <tx:annotation-driven transaction-manager="transactionManagerCustomer"/>

    <!-- Add support for reading web resources: css, images, js, etc ... -->
    <mvc:resources mapping="/resources/**" location="/resources/static/"/>

</beans>