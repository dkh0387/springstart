#
# NOTE: if the app is running with docker compose with the mysql container itself
# we need to use internal port 3306 and a container name as a host, if it is running on local machine
# and trying to connect to mysql container, than use localhost:3307
#
########################################################################################################################
# 1. JDBC connection properties
########################################################################################################################

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.c3p0.min_size=5
spring.jpa.properties.hibernate.c3p0.max_size=20
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.datasource.url=jdbc:mysql://mysql-service:3306/customer_db?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false
#spring.datasource.url=jdbc:mysql://localhost:3307/customer_db?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false
spring.datasource.username=springstudent
spring.datasource.password=springstudent
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
#server.address=localhost
#server.port=8081

########################################################################################################################
# 2. Kafka configuration
########################################################################################################################

# Apache Kafka broker (= server), where messages to consumer are coming in
# NOTE: if we have multiple brokers (managed by zookeeper) we list them comma separated
spring.kafka.consumer.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
#spring.kafka.consumer.bootstrap-servers=localhost:9092

########################################################################################################################
# 2.1 Consumer
########################################################################################################################

# Unique group id for a group where multiple consumers may belong to
spring.kafka.consumer.group-id=consumerGroup1
# Will automatically reset offset to the earliest one
spring.kafka.consumer.auto-offset-reset=earliest
# Which class should be used to deserialize a message key/value?
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
# Value serializer using in KafkaTemplate<K, V>: the first one is just a String, the second: POJO as JSON
#
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#
#Trusted packages with classes can be deserialized by JsonDeserializer
#
spring.kafka.consumer.properties.spring.json.trusted.packages=*
