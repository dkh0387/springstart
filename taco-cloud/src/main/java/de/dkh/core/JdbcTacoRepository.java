package de.dkh.core;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

@Repository
public class JdbcTacoRepository extends JdbcRepository implements TacoRepositoiry {

	private static final String INSERT_INTO = "INSERT INTO %s (%s, %s) VALUES (?, ?)";
	private IngredientRepository ingredientRepository;

	@Autowired
	public JdbcTacoRepository(JdbcTemplate jdbc, IngredientRepository ingredientRepository) {
		super(jdbc);
		this.ingredientRepository = ingredientRepository;
	}

	@Override
	public Taco save(Taco taco) {
		long id = saveTacoInfo(taco);
		taco.setId(id);

		getIngredientsFromIds(taco).forEach(i -> saveIngredientForTaco(i, id));
		return taco;
	}

	private List<Ingredient> getIngredientsFromIds(Taco taco) {
		return taco.getIngredients().stream().map(id -> ingredientRepository.findById(id)).collect(Collectors.toList());
	}

	private void saveIngredientForTaco(Ingredient ingredient, long id) {
		getJdbc().update(String.format(INSERT_INTO, TacoIngredient.TACO_INGREDIENTS_TABLE_NAME,
				TacoIngredient.PROP_TACO, TacoIngredient.PROP_INGREDIENT), id, ingredient.getId());
	}

	/**
	 * INSERT statement is generated by
	 * {@linkplain PreparedStatementCreatorFactory}. {@linkplain KeyHolder} gets an
	 * id after saving the object.
	 * 
	 * @param taco
	 * @return
	 */
	private long saveTacoInfo(Taco taco) {
		taco.setCreatedAt(new Date());
		PreparedStatementCreator psc = new PreparedStatementCreatorFactory(
				String.format(INSERT_INTO, Taco.TABLE_NAME, Taco.NAME.getName(), Taco.CREATED.getName()),
				Taco.NAME.getType(), Taco.CREATED.getType()).newPreparedStatementCreator(
						Arrays.asList(taco.getName(), new Timestamp(taco.getCreatedAt().getTime())));
		KeyHolder keyHolder = new GeneratedKeyHolder();
		getJdbc().update(psc, keyHolder);
		return keyHolder.getKey().longValue();
	}

}
